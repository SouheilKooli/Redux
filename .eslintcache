[{"C:\\Users\\Ridha SHILI\\Desktop\\Gomy\\Testing\\Testredux\\my-app\\src\\App.js":"1","C:\\Users\\Ridha SHILI\\Desktop\\Gomy\\Testing\\Testredux\\my-app\\src\\Components\\list.js":"2","C:\\Users\\Ridha SHILI\\Desktop\\Gomy\\Testing\\Testredux\\my-app\\src\\Components\\linkFilter.js":"3","C:\\Users\\Ridha SHILI\\Desktop\\Gomy\\Testing\\Testredux\\my-app\\src\\index.js":"4","C:\\Users\\Ridha SHILI\\Desktop\\Gomy\\Testing\\Testredux\\my-app\\src\\Components\\Add.js":"5","C:\\Users\\Ridha SHILI\\Desktop\\Gomy\\Testing\\Testredux\\my-app\\src\\Components\\Filters.js":"6","C:\\Users\\Ridha SHILI\\Desktop\\Gomy\\Testing\\Testredux\\my-app\\src\\Components\\Action\\Actions.js":"7","C:\\Users\\Ridha SHILI\\Desktop\\Gomy\\Testing\\Testredux\\my-app\\src\\Components\\Store\\Store.js":"8","C:\\Users\\Ridha SHILI\\Desktop\\Gomy\\Testing\\Testredux\\my-app\\src\\Components\\Action\\Reduce.js":"9"},{"size":369,"mtime":1609582511496,"results":"10","hashOfConfig":"11"},{"size":2864,"mtime":1609405676136,"results":"12","hashOfConfig":"11"},{"size":691,"mtime":1609404401466,"results":"13","hashOfConfig":"11"},{"size":336,"mtime":1609404424555,"results":"14","hashOfConfig":"11"},{"size":667,"mtime":1609406205249,"results":"15","hashOfConfig":"11"},{"size":876,"mtime":1609406115455,"results":"16","hashOfConfig":"11"},{"size":627,"mtime":1609147049813,"results":"17","hashOfConfig":"11"},{"size":246,"mtime":1609404450414,"results":"18","hashOfConfig":"11"},{"size":1319,"mtime":1609404476829,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1m2ly1t",{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"25"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"25"},"C:\\Users\\Ridha SHILI\\Desktop\\Gomy\\Testing\\Testredux\\my-app\\src\\App.js",[],"C:\\Users\\Ridha SHILI\\Desktop\\Gomy\\Testing\\Testredux\\my-app\\src\\Components\\list.js",["42"],"import React, {useState} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {todolistFilters, toggleTodo, text} from \"./Action/Actions\";\r\nimport \"../App.css\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {updateTodo} from \"./Action/Actions\";\r\n\r\n\r\n\r\nconst getListTask = (totasks, filter) => {\r\n  switch (filter) {\r\n    case todolistFilters.SHOW_ALL:\r\n      return totasks;\r\n    case todolistFilters.SHOW_ACTIVE:\r\n      return totasks.filter((t) => !t.completed);\r\n    case todolistFilters.SHOW_COMPLETED:\r\n      return totasks.filter((t) => t.completed);\r\n    default:\r\n      throw new Error(\"unknown filter\" + filter);\r\n  }\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    totasks: getListTask(state.totasks, state.todolistFilter),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    toggleTodo: (id) => dispatch(toggleTodo(id)),\r\n  };\r\n};\r\n\r\nconst ListTask = ({ totasks, toggleTodo }) => {\r\n  const [editable, setEditable] = useState(false);\r\n  const [text, setText] = useState();\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <div className=\"todo-container\">\r\n      <ul className=\"todo-list\">\r\n        <span>✅ Task1: Do 1</span>\r\n        <br />\r\n        <span>✅ Task2: Do 2 </span>\r\n        <br />\r\n        {totasks.map((totask) => (\r\n          <div className=\"list\">\r\n            <div\r\n              onClick={() => toggleTodo(totask.id)}\r\n              key={totask.id}\r\n              style={{\r\n                color: \"black\",\r\n              }}\r\n            >\r\n              {totask && totask.completed ? \"✅\" : \"⬜\"}{\" \"}\r\n              <div\r\n                className={\r\n                  totask && totask.completed && \"totask-item__text--completed\"\r\n                }\r\n              >\r\n                {totask.text}\r\n              </div>\r\n              <div>\r\n                {editable ? (\r\n                  <input classeName=\"edit\"\r\n                    type=\"text\"\r\n                    value={text}\r\n                    onChange={(e) => setText(e.target.value)}\r\n                  />\r\n                ) : (\r\n                  <span>{}</span>\r\n                )}\r\n                <button \r\n                  className=\"btn\"\r\n                  onClick={() => {\r\n                    dispatch(\r\n                      updateTodo({\r\n                        ...totask,\r\n                        text: text,\r\n                      })\r\n                    );\r\n\r\n                    if (editable) {\r\n                      setText(text);\r\n                    }\r\n                    setEditable(!editable);\r\n                  }}\r\n                >\r\n                  \"✎\" {editable ? \"updated\" : \"Edit\"}\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ListTask);",["43","44"],"C:\\Users\\Ridha SHILI\\Desktop\\Gomy\\Testing\\Testredux\\my-app\\src\\Components\\linkFilter.js",[],"C:\\Users\\Ridha SHILI\\Desktop\\Gomy\\Testing\\Testredux\\my-app\\src\\index.js",[],"C:\\Users\\Ridha SHILI\\Desktop\\Gomy\\Testing\\Testredux\\my-app\\src\\Components\\Add.js",["45"],"import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { addTask, EditTask } from \"./Action/Actions\";\r\n\r\nconst AddTask = ({ dispatch }) => {\r\n  let input;\r\n  const addTaskk = (e) => {\r\n    e.preventDefault();\r\n    if (!input.value) return;\r\n    dispatch(addTask(input.value));\r\n    input.value = \"\";\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <form onSubmit={addTaskk}>\r\n          <input\r\n            ref={(node) => (input = node)}\r\n            placeholder=\"What to ignore here...\"\r\n          />\r\n          <button type=\"submit\">Add Task</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect()(AddTask);","C:\\Users\\Ridha SHILI\\Desktop\\Gomy\\Testing\\Testredux\\my-app\\src\\Components\\Filters.js",[],"C:\\Users\\Ridha SHILI\\Desktop\\Gomy\\Testing\\Testredux\\my-app\\src\\Components\\Action\\Actions.js",[],"C:\\Users\\Ridha SHILI\\Desktop\\Gomy\\Testing\\Testredux\\my-app\\src\\Components\\Store\\Store.js",[],"C:\\Users\\Ridha SHILI\\Desktop\\Gomy\\Testing\\Testredux\\my-app\\src\\Components\\Action\\Reduce.js",["46"],"import { combineReducers } from \"redux\";\r\nimport { todolistFilters, updateTodo } from \"../Action/Actions\";\r\n\r\n// const initState = {\r\n//     totask: [],\r\n//     text:'',\r\n//     input:''\r\n// };\r\n\r\nconst totasks = (state = [], action) => {\r\n  let newTasks;\r\n  switch (action.type) {\r\n    case \"ADD_TASK\":\r\n      return [\r\n        ...state,\r\n        {\r\n          id: action.id,\r\n          text: action.text,\r\n          completed: false,\r\n        },\r\n      ];\r\n    case \"TOGGLE_TODO\": \r\n      return state.map((totask) =>\r\n        totask.id === action.id\r\n          ? { ...totask, completed: !totask.completed }\r\n          : totask\r\n      );\r\n    case \"UPDATE_TODO\":\r\n      newTasks = [...state];\r\n      let index = -1;\r\n      for (let i = 0; i < newTasks.length; i++) {\r\n        index++;\r\n        if (newTasks[i].id === action.payload.id) {\r\n          break;\r\n        }\r\n      }\r\n      if (index !== -1) {\r\n        newTasks[index] = action.payload;\r\n        return newTasks;\r\n      }\r\n      break;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst todolistFilter = (state = todolistFilters.SHOW_ALL, action) => {\r\n  switch (action.type) {\r\n    case \"SET_TODOLIST_FILTER\":\r\n      return action.filter;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default combineReducers({\r\n  totasks,\r\n  todolistFilter,\r\n});",{"ruleId":"47","severity":1,"message":"48","line":3,"column":38,"nodeType":"49","messageId":"50","endLine":3,"endColumn":42},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"47","severity":1,"message":"55","line":3,"column":19,"nodeType":"49","messageId":"50","endLine":3,"endColumn":27},{"ruleId":"47","severity":1,"message":"56","line":2,"column":27,"nodeType":"49","messageId":"50","endLine":2,"endColumn":37},"no-unused-vars","'text' is defined but never used.","Identifier","unusedVar","no-native-reassign",["57"],"no-negated-in-lhs",["58"],"'EditTask' is defined but never used.","'updateTodo' is defined but never used.","no-global-assign","no-unsafe-negation"]